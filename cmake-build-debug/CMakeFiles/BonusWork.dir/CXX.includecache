#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])

#IncludeRegexScan: ^.*$

#IncludeRegexComplain: ^$

#IncludeRegexTransform: 

C:/Users/Miray/CLionProjects/BonusWork/10.Print elements of a linked list in forward and reverse order using recursion/Node10.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/11.Reverse a linked list using recursion/Node11.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/13.Doubly Linked List - Implementation/Node13.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/15.Array implementation of stacks/Node15.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/16.Linked List implementation of stacks/Node16.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/17.Reverse a string or linked list using stack/Node17.h
iostream
-
stack
-
cstring
-

C:/Users/Miray/CLionProjects/BonusWork/18.Check for balanced parentheses using stack/Node18.h
iostream
-
string
-
stack
-

C:/Users/Miray/CLionProjects/BonusWork/20. Evaluation of Prefix and Postfix expressions using stack/Node20.h
iostream
-
string
-
stack
-

C:/Users/Miray/CLionProjects/BonusWork/21.Infix to Postfix using stack/Node21.h
iostream
-
string
-
stack
-

C:/Users/Miray/CLionProjects/BonusWork/23.Array implementation of Queue/Node23.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/24.Linked List implementation of Queue/Node24.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/28.Binary search tree - Implementation/Node28.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/30.Find min and max element in a binary search tree/Node30.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/31.Find height of a binary tree/Node31.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/33. Level Order Traversal/Node33.h
iostream
-
queue
-

C:/Users/Miray/CLionProjects/BonusWork/34.Preorder, Inorder, Postorder/Node34.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/35.Check if a binary tree is binary search tree or not/Node35.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/36.Delete a node from Binary Search Tree/Node36.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/37.Inorder Successor in a binary search tree/Node37.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/5. Linked List Implemantation/Node5.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/6.Inserting a node at beginning/Node6.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/7.Insert a node at nth position/Node7.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/8.Delete a node at nth position/Node8.h
iostream
-

C:/Users/Miray/CLionProjects/BonusWork/9.Reverse a linked list/Node9.h
iostream
-
stdlib.h
-

C:/Users/Miray/CLionProjects/BonusWork/main.cpp
5. Linked List Implemantation/Node5.h
C:/Users/Miray/CLionProjects/BonusWork/5. Linked List Implemantation/Node5.h
6.Inserting a node at beginning/Node6.h
C:/Users/Miray/CLionProjects/BonusWork/6.Inserting a node at beginning/Node6.h
7.Insert a node at nth position/Node7.h
C:/Users/Miray/CLionProjects/BonusWork/7.Insert a node at nth position/Node7.h
8.Delete a node at nth position/Node8.h
C:/Users/Miray/CLionProjects/BonusWork/8.Delete a node at nth position/Node8.h
9.Reverse a linked list/Node9.h
C:/Users/Miray/CLionProjects/BonusWork/9.Reverse a linked list/Node9.h
10.Print elements of a linked list in forward and reverse order using recursion/Node10.h
C:/Users/Miray/CLionProjects/BonusWork/10.Print elements of a linked list in forward and reverse order using recursion/Node10.h
11.Reverse a linked list using recursion/Node11.h
C:/Users/Miray/CLionProjects/BonusWork/11.Reverse a linked list using recursion/Node11.h
13.Doubly Linked List - Implementation/Node13.h
C:/Users/Miray/CLionProjects/BonusWork/13.Doubly Linked List - Implementation/Node13.h
15.Array implementation of stacks/Node15.h
C:/Users/Miray/CLionProjects/BonusWork/15.Array implementation of stacks/Node15.h
16.Linked List implementation of stacks/Node16.h
C:/Users/Miray/CLionProjects/BonusWork/16.Linked List implementation of stacks/Node16.h
17.Reverse a string or linked list using stack/Node17.h
C:/Users/Miray/CLionProjects/BonusWork/17.Reverse a string or linked list using stack/Node17.h
18.Check for balanced parentheses using stack/Node18.h
C:/Users/Miray/CLionProjects/BonusWork/18.Check for balanced parentheses using stack/Node18.h
20. Evaluation of Prefix and Postfix expressions using stack/Node20.h
C:/Users/Miray/CLionProjects/BonusWork/20. Evaluation of Prefix and Postfix expressions using stack/Node20.h
21.Infix to Postfix using stack/Node21.h
C:/Users/Miray/CLionProjects/BonusWork/21.Infix to Postfix using stack/Node21.h
23.Array implementation of Queue/Node23.h
C:/Users/Miray/CLionProjects/BonusWork/23.Array implementation of Queue/Node23.h
24.Linked List implementation of Queue/Node24.h
C:/Users/Miray/CLionProjects/BonusWork/24.Linked List implementation of Queue/Node24.h
28.Binary search tree - Implementation/Node28.h
C:/Users/Miray/CLionProjects/BonusWork/28.Binary search tree - Implementation/Node28.h
30.Find min and max element in a binary search tree/Node30.h
C:/Users/Miray/CLionProjects/BonusWork/30.Find min and max element in a binary search tree/Node30.h
31.Find height of a binary tree/Node31.h
C:/Users/Miray/CLionProjects/BonusWork/31.Find height of a binary tree/Node31.h
33. Level Order Traversal/Node33.h
C:/Users/Miray/CLionProjects/BonusWork/33. Level Order Traversal/Node33.h
34.Preorder, Inorder, Postorder/Node34.h
C:/Users/Miray/CLionProjects/BonusWork/34.Preorder, Inorder, Postorder/Node34.h
35.Check if a binary tree is binary search tree or not/Node35.h
C:/Users/Miray/CLionProjects/BonusWork/35.Check if a binary tree is binary search tree or not/Node35.h
36.Delete a node from Binary Search Tree/Node36.h
C:/Users/Miray/CLionProjects/BonusWork/36.Delete a node from Binary Search Tree/Node36.h
37.Inorder Successor in a binary search tree/Node37.h
C:/Users/Miray/CLionProjects/BonusWork/37.Inorder Successor in a binary search tree/Node37.h

